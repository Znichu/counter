{"version":3,"sources":["Buttons/Buttons.module.css","Counter/Counter.module.css","SettingsCounter/Settings.module.css","Input/Input.module.css","Buttons/Button/Button.jsx","Buttons/Buttons.jsx","Counter/Counter.jsx","Input/Input.jsx","SettingsCounter/Settings.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","onClick","this","props","disabled","disable","type","className","title","React","Component","Buttons","state","counter","max","start","validated","disableReset","disableIncrement","style","btnGroup","incrementCounter","resetCounter","Counter","counterHeader","Input","componentInput","onChange","value","Settings","onChangeMaxValue","e","onChangeInputMax","currentTarget","onChangeStartValue","onChangeInputStart","disableSave","settingsInput","addSettings","App","setState","prevState","saveState","newCounter","JSON","stringify","localStorage","setItem","restoreState","parse","getItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.221ac1c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGroup\":\"Buttons_btnGroup__3Vh7X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterHeader\":\"Counter_counterHeader__PY5qf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsInput\":\"Settings_settingsInput__KRcUM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"componentInput\":\"Input_componentInput__1fEMb\"};","import React from \"react\";\r\n\r\n\r\nclass Button extends React.Component {\r\n    render() {\r\n        return (\r\n                <button\r\n                    onClick={this.props.onClick}\r\n                    disabled={this.props.disable}\r\n                    type={this.props.type}\r\n                    className={this.props.className}\r\n                >\r\n                    {this.props.title}\r\n                </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Button from \"./Button/Button\";\r\nimport style from './Buttons.module.css'\r\n\r\n\r\nclass Buttons extends React.Component {\r\n    render() {\r\n        let {counter, max, start, validated} = this.props.state;\r\n        let disableReset = !validated || counter === start || max === start || start > max;\r\n        let disableIncrement =!validated || counter === max || max === start || start > max;\r\n\r\n        return (\r\n            <div className={style.btnGroup}>\r\n\r\n                <Button\r\n                    onClick={this.props.incrementCounter}\r\n                    disable={disableIncrement}\r\n                    type={\"button\"}\r\n                    className={\"btn teal\"}\r\n                    title={\"Increment\"}\r\n                />\r\n\r\n                <Button\r\n                    onClick={() => {this.props.resetCounter(start)}}\r\n                    disable={disableReset}\r\n                    type={\"button\"}\r\n                    className={\"btn red lighten-1\"}\r\n                    title={\"Reset\"}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport Buttons from \"../Buttons/Buttons\";\r\nimport style from './Counter.module.css'\r\n\r\n\r\nclass Counter extends React.Component {\r\n    render() {\r\n\r\n        let {counter, start, max, validated} = this.props.state;\r\n        let className = start < 0 || max < 0 || max === start || max < start || counter === max ? \"stop\" : null;\r\n\r\n        let messageCounter = () => {\r\n            if ( start < 0 || max < 0 || max === start || max < start) {\r\n                return \"Incorrect value!\";\r\n            } else if (!validated) {\r\n                return \"Enter value and press 'save'\";\r\n            } else {\r\n                return counter;\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div className={style.counterHeader}>\r\n                <h5>Counter</h5>\r\n                <span className={className}>{messageCounter()}</span>\r\n                <Buttons\r\n                    resetCounter={this.props.resetCounter}\r\n                    incrementCounter={this.props.incrementCounter}\r\n                    state={this.props.state}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;","import React from \"react\";\r\nimport style from './Input.module.css'\r\n\r\n\r\nclass Input extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className={style.componentInput}>\r\n                <span>{this.props.title}</span>\r\n                <input className={this.props.className} type ={this.props.type} onChange={this.props.onChange} value={this.props.value} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Input;","import React from \"react\";\r\nimport style from './Settings.module.css'\r\nimport Button from \"../Buttons/Button/Button\";\r\nimport Input from \"../Input/Input\";\r\n\r\n\r\nclass Settings extends React.Component {\r\n\r\n    onChangeMaxValue = (e) => {\r\n        this.props.onChangeInputMax(+e.currentTarget.value);\r\n    };\r\n\r\n    onChangeStartValue = (e) => {\r\n        this.props.onChangeInputStart(+e.currentTarget.value);\r\n    };\r\n\r\n    render() {\r\n        let { max, start, validated } = this.props.state;\r\n        let className = start < 0 || max < 0 || max === start || max < start ? \"invalid\" : null;\r\n        let disableSave = validated || max === start || start < 0 || max <= 0 || start > max;\r\n\r\n        return(\r\n            <div className={style.settingsInput}>\r\n                <h5>Settings</h5>\r\n\r\n                    <Input\r\n                        onChange={this.onChangeMaxValue}\r\n                        type={\"number\"}\r\n                        value={this.props.state.max}\r\n                        title={\"max value:\"}\r\n                        className={className}\r\n                    />\r\n\r\n                    <Input\r\n                        onChange={this.onChangeStartValue}\r\n                        type={\"number\"}\r\n                        value={this.props.state.start}\r\n                        title={\"start value:\"}\r\n                        className={className}\r\n                    />\r\n\r\n                    <Button\r\n                        onClick={() => {this.props.addSettings(start)}}\r\n                        disable={disableSave}\r\n                        type={\"button\"}\r\n                        className={\"btn teal\"}\r\n                        title={\"Save\"}\r\n                    />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings","import React from 'react';\nimport './App.css';\nimport Counter from \"./Counter/Counter\";\nimport Settings from \"./SettingsCounter/Settings\";\n\nclass App extends React.Component {\n\n    state = {\n        counter: 0,\n        max: 5,\n        start: 0,\n        validated: true\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    };\n\n    incrementCounter = () => this.setState((prevState) => ({counter: prevState.counter + 1}),\n        () => {this.saveState();});\n    resetCounter = (value) => this.setState((prevState) => ({...prevState, counter: value}),\n        () => {this.saveState();});\n\n    addSettings = (newCounter) => {\n        this.setState((prevState) => ({...prevState, counter: newCounter, validated: true}),\n            () => {this.saveState();});\n    };\n\n    onChangeInputMax = (value) => {\n        this.setState((prevState) => ({...prevState, max: value, validated: false}),\n            () => {this.saveState();});\n    };\n\n    onChangeInputStart = (value) => {\n        this.setState((prevState) => ({...prevState, start: value,  validated: false}),\n            () => {this.saveState();});\n    };\n\n    saveState = () => {\n        let saveState = JSON.stringify(this.state);\n        localStorage.setItem(\"save_state\", saveState);\n    };\n\n    restoreState = () => {\n        let state = {\n            counter: 0,\n            max: 5,\n            start: 0,\n            validated: true\n        };\n        state = JSON.parse(localStorage.getItem(\"save_state\"));\n        this.setState(state)\n    };\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"counter z-depth-5\">\n\n                        <Counter\n                            state={this.state}\n                            incrementCounter={this.incrementCounter}\n                            resetCounter={this.resetCounter}\n                        />\n\n                        <Settings\n                            state={this.state}\n                            onChangeInputMax={this.onChangeInputMax}\n                            onChangeInputStart={this.onChangeInputStart}\n                            addSettings={this.addSettings}\n                        />\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}