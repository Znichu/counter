{"version":3,"sources":["Buttons/Buttons.module.css","Counter/Counter.module.css","SettingsCounter/Settings.module.css","Input/Input.module.css","Buttons/Button/Button.jsx","Buttons/Buttons.jsx","Counter/Counter.jsx","Input/Input.jsx","SettingsCounter/Settings.jsx","store/counter-reducer.js","App.js","serviceWorker.js","store/store.js","index.js"],"names":["module","exports","Button","onClick","this","props","disabled","disable","type","className","title","React","Component","Buttons","counter","max","start","validated","disableReset","disableIncrement","style","btnGroup","incrementCounter","resetCounter","Counter","counterHeader","Input","componentInput","onChange","value","Settings","onChangeMaxValue","e","onChangeInputMax","currentTarget","onChangeStartValue","onChangeInputStart","disableSave","settingsInput","addSettings","initialsState","CounterReducer","state","action","inputValue","App","increment","reset","saveSettings","updateMax","updateStart","connect","Boolean","window","location","hostname","match","store","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","save","composeEnhancers","createStore","createStoreWithMiddleware","combineReducers","load","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e4b796a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGroup\":\"Buttons_btnGroup__3BNxs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterHeader\":\"Counter_counterHeader__1Oejq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsInput\":\"Settings_settingsInput__19UdT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"componentInput\":\"Input_componentInput__2oZfC\"};","import React from \"react\";\r\n\r\n\r\nclass Button extends React.Component {\r\n    render() {\r\n        return (\r\n                <button\r\n                    onClick={this.props.onClick}\r\n                    disabled={this.props.disable}\r\n                    type={this.props.type}\r\n                    className={this.props.className}\r\n                >\r\n                    {this.props.title}\r\n                </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Button from \"./Button/Button\";\r\nimport style from './Buttons.module.css'\r\n\r\n\r\nclass Buttons extends React.Component {\r\n    render() {\r\n        let counter = this.props.counter;\r\n        let max = this.props.max;\r\n        let start = this.props.start;\r\n        let validated = this.props.validated;\r\n        let disableReset = !validated || counter === start || max === start || start > max;\r\n        let disableIncrement = !validated || counter === max || max === start || start > max;\r\n\r\n        return (\r\n            <div className={style.btnGroup}>\r\n\r\n                <Button\r\n                    onClick={this.props.incrementCounter}\r\n                    disable={disableIncrement}\r\n                    type={\"button\"}\r\n                    className={\"btn teal\"}\r\n                    title={\"Increment\"}\r\n                />\r\n\r\n                <Button\r\n                    onClick={this.props.resetCounter}\r\n                    disable={disableReset}\r\n                    type={\"button\"}\r\n                    className={\"btn red lighten-1\"}\r\n                    title={\"Reset\"}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport Buttons from \"../Buttons/Buttons\";\r\nimport style from './Counter.module.css'\r\n\r\n\r\nclass Counter extends React.Component {\r\n    render() {\r\n\r\n        let counter = this.props.counter;\r\n        let max = this.props.max;\r\n        let start = this.props.start;\r\n        let validated = this.props.validated;\r\n        let className = start < 0 || max < 0 || max === start || max < start || counter === max ? \"stop\" : null;\r\n\r\n        let messageCounter = () => {\r\n            if ( start < 0 || max < 0 || max === start || max < start) {\r\n                return \"Incorrect value!\";\r\n            } else if (!validated) {\r\n                return \"Enter value and press 'save'\";\r\n            } else {\r\n                return this.props.counter;\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div className={style.counterHeader}>\r\n                <h5>Counter</h5>\r\n                <span className={className}>{messageCounter()}</span>\r\n                <Buttons\r\n                    counter={this.props.counter}\r\n                    max={this.props.max}\r\n                    start={this.props.start}\r\n                    validated={this.props.validated}\r\n                    resetCounter={this.props.resetCounter}\r\n                    incrementCounter={this.props.incrementCounter}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;","import React from \"react\";\r\nimport style from './Input.module.css'\r\n\r\n\r\nclass Input extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className={style.componentInput}>\r\n                <span>{this.props.title}</span>\r\n                <input className={this.props.className} type ={this.props.type} onChange={this.props.onChange} value={this.props.value} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Input;","import React from \"react\";\r\nimport style from './Settings.module.css'\r\nimport Button from \"../Buttons/Button/Button\";\r\nimport Input from \"../Input/Input\";\r\n\r\n\r\nclass Settings extends React.Component {\r\n\r\n    onChangeMaxValue = (e) => {\r\n        this.props.onChangeInputMax(+e.currentTarget.value);\r\n    };\r\n\r\n    onChangeStartValue = (e) => {\r\n        this.props.onChangeInputStart(+e.currentTarget.value);\r\n    };\r\n\r\n    render() {\r\n        let max = this.props.max;\r\n        let start = this.props.start;\r\n        let validated = this.props.validated;\r\n        let className = start < 0 || max < 0 || max === start || max < start ? \"invalid\" : null;\r\n        let disableSave = validated || max === start || start < 0 || max <= 0 || start > max;\r\n\r\n        return(\r\n            <div className={style.settingsInput}>\r\n                <h5>Settings</h5>\r\n\r\n                    <Input\r\n                        onChange={this.onChangeMaxValue}\r\n                        type={\"number\"}\r\n                        value={this.props.max}\r\n                        title={\"max value:\"}\r\n                        className={className}\r\n                />\r\n\r\n                    <Input\r\n                        onChange={this.onChangeStartValue}\r\n                        type={\"number\"}\r\n                        value={this.props.start}\r\n                        title={\"start value:\"}\r\n                        className={className}\r\n                    />\r\n\r\n                    <Button\r\n                        onClick={this.props.addSettings}\r\n                        disable={disableSave}\r\n                        type={\"button\"}\r\n                        className={\"btn teal\"}\r\n                        title={\"Save\"}\r\n                    />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings","const INCREMENT_COUNTER = \"INCREMENT_COUNTER\";\r\nconst RESET_COUNTER = \"RESET_COUNTER\";\r\nconst SAVE_SETTINGS = \"SAVE_SETTINGS\";\r\nconst UPDATE_MAX = \"UPDATE_MAX\";\r\nconst UPDATE_START = \"UPDATE_START\";\r\n\r\nlet initialsState = {\r\n    counter: 0,\r\n    max: 5,\r\n    start: 0,\r\n    validated: true\r\n};\r\n\r\n\r\nconst CounterReducer = (state = initialsState, action) => {\r\n    switch (action.type) {\r\n        case INCREMENT_COUNTER: {\r\n            return {\r\n                ...state,\r\n                counter: state.counter +1\r\n            }\r\n        }\r\n        case RESET_COUNTER: {\r\n            return {\r\n                ...state,\r\n                counter: state.start\r\n            }\r\n        }\r\n        case SAVE_SETTINGS: {\r\n            return {\r\n                ...state,\r\n                counter: state.start,\r\n                validated: true\r\n            }\r\n        }\r\n        case UPDATE_MAX: {\r\n            return {\r\n                ...state,\r\n                max: action.inputValue,\r\n                validated: false\r\n            }\r\n        }\r\n        case UPDATE_START: {\r\n            return {\r\n                ...state,\r\n                start: action.inputValue,\r\n                validated: false\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport const increment = () => ({type: INCREMENT_COUNTER});\r\nexport const reset = () => ({type: RESET_COUNTER});\r\nexport const saveSettings = () => ({type: SAVE_SETTINGS});\r\nexport const updateMax = (inputValue) => ({type: UPDATE_MAX, inputValue});\r\nexport const updateStart = (inputValue) => ({type:UPDATE_START, inputValue});\r\n\r\nexport default CounterReducer;","import React from 'react';\r\nimport './App.css';\r\nimport Counter from \"./Counter/Counter\";\r\nimport Settings from \"./SettingsCounter/Settings\";\r\nimport {connect} from \"react-redux\";\r\nimport {increment, reset, saveSettings, updateMax, updateStart} from \"./store/counter-reducer\";\r\n\r\nclass App extends React.Component {\r\n\r\n    incrementCounter = () => {\r\n        this.props.increment()\r\n    };\r\n    resetCounter = () => {\r\n        this.props.reset()\r\n    };\r\n\r\n    addSettings = () => {\r\n        this.props.saveSettings();\r\n    };\r\n\r\n    onChangeInputMax = (inputValue) => {\r\n        this.props.updateMax(inputValue);\r\n    };\r\n\r\n    onChangeInputStart = (inputValue) => {\r\n        this.props.updateStart(inputValue);\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"counter z-depth-5\">\r\n\r\n                        <Counter\r\n                            counter={this.props.counter}\r\n                            max={this.props.max}\r\n                            start={this.props.start}\r\n                            validated={this.props.validated}\r\n                            incrementCounter={this.incrementCounter}\r\n                            resetCounter={this.resetCounter}\r\n                        />\r\n\r\n                        <Settings\r\n                            max={this.props.max}\r\n                            start={this.props.start}\r\n                            validated={this.props.validated}\r\n                            onChangeInputMax={this.onChangeInputMax}\r\n                            onChangeInputStart={this.onChangeInputStart}\r\n                            addSettings={this.addSettings}\r\n                        />\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    counter: state.counter.counter,\r\n    max: state.counter.max,\r\n    start: state.counter.start,\r\n    validated: state.counter.validated\r\n});\r\n\r\nexport default connect (mapStateToProps, {increment, reset, saveSettings, updateMax, updateStart}) (App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport CounterReducer from \"./counter-reducer\";\r\nimport { save, load } from \"redux-localstorage-simple\"\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst createStoreWithMiddleware = composeEnhancers(applyMiddleware(save())) (createStore);\r\n\r\nlet rootReducer = combineReducers(\r\n    {\r\n        counter: CounterReducer\r\n    }\r\n);\r\n\r\nlet store = createStoreWithMiddleware (rootReducer, load() );\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./store/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}